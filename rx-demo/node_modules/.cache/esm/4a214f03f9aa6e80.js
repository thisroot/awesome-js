let Observable,asyncScheduler,from,asapScheduler,queueScheduler,observeOn;_f9a‍.w("rxjs",[["Observable",["Observable"],function(v){Observable=v}],["asyncScheduler",["asyncScheduler"],function(v){asyncScheduler=v}],["from",["from"],function(v){from=v}],["asapScheduler",["asapScheduler"],function(v){asapScheduler=v}],["queueScheduler",["queueScheduler"],function(v){queueScheduler=v}]]);_f9a‍.w("rxjs/operators",[["observeOn",["observeOn"],function(v){observeOn=v}]]);

 
// const observable = new Observable((observer) => {
//   observer.next(1);
//   observer.next(2);
//   observer.next(3);
//   observer.complete();
// }).pipe(
//   observeOn(asyncScheduler)
// );

console.log('just before subscribe');

from(['b', 'c', 'd'])
  .pipe(observeOn(asyncScheduler))
  .subscribe(vl => console.log('asyncScheduler'))

from(['b', 'c', 'd'])
  .pipe(observeOn(asapScheduler))
  .subscribe(vl => console.log('asapScheduler'))

// from(['b', 'c', 'd'])
// .pipe(observeOn(animationFrameScheduler))
// .subscribe(vl => console.log('animationFrameScheduler'))

from(['b', 'c', 'd'])
.pipe(observeOn(queueScheduler))
.subscribe(vl => console.log('queueScheduler'))
 
console.log('just after subscribe');